package leetCode;

import java.util.ArrayList;
import java.util.List;

public class LC928minMalwareSpread {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        boolean[] initialSet = new boolean[n];
        for (int v : initial) {
            initialSet[v] = true;
        }
        List<Integer>[] infectedBy = new List[n];

        for (int i = 0; i < n; i++) {
            infectedBy[i] = new ArrayList<>();
        }

        for (int v : initial) {
            boolean[] infectedSet = new boolean[n];
            dfs(graph, initialSet, infectedSet, v);
            for (int u = 0; u < n; u++) {
                if (infectedSet[u]) {
                    //代表u可以被V感染
                    infectedBy[u].add(v);
                }
            }
        }

        int[] count = new int[n];
        for (int u = 0; u < n; u++) {
//      如果infectedBy[u].size() > 1，那么节点u可以被多个初始感染节点感染，移除任何一个这些节点都无法阻止节点u被感染。因此，我们只处理infectedBy[u].size() == 1的节点。
            if (infectedBy[u].size() == 1) {
                //记录只被v感染的？
                count[infectedBy[u].get(0)]++;
            }
        }

//        移除后能够使 M(initial) 最小化的节点。如果有多个节点满足条件，返回索引 最小的节点 。
        int res = initial[0];
        for (int v : initial) {
            if (count[v] > count[res] || (count[v] == count[res] && v < res)) {
                res = v;
            }
        }
        return res;
    }



    //这个dfs看懂了
    public void dfs(int[][] graph, boolean[] initialSet, boolean[] infectedSet, int v) {
        int n = graph.length;

        for (int u = 0; u < n; u++) {
            if (graph[v][u] == 0 || initialSet[u] || infectedSet[u]) {
                continue;
            }
            infectedSet[u] = true;
            dfs(graph, initialSet, infectedSet, u);
        }
    }


    //todo 可以使用并查集来优化
}
